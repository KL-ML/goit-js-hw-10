{"mappings":"gBAcAA,EAAe,CAAEC,eAZjB,WACA,IAAMC,EAAM,GAAYC,OAHN,mCAGM,mDACtB,OAAOC,MAAMF,GAAKG,MAChB,SAACC,GACC,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAEzB,OAAOH,EAASI,M,MCLlBC,EAAYC,SAASC,cAAc,eAEnCC,GADcF,SAASC,cAAc,iBACvBD,SAASC,cAAc,kBAE3CF,EAAUI,iBAAiB,SAAS,WAClCf,EAAIC,iBAECI,MAAK,SAACW,G,OAmBb,SAA2BA,GACiCA,EAAhDC,KAAgDD,EAA1CE,QAA0CF,EAAjCG,WAAiCH,EAArBI,MAAqBJ,EAAdK,UAC1CC,QAAQC,IAAIP,GACd,IAAMQ,EAASR,EACVS,KAAI,SAAAC,G,IAAGC,EAAID,EAAJT,KAAMC,EAAOQ,EAAPR,QAASC,EAAUO,EAAVP,WAAYC,EAAKM,EAALN,MAAOC,EAASK,EAATL,UAChCO,EAAgB,GAKxB,OAJEP,EAAUI,KAAI,SAAAI,G,IAAGZ,EAAIY,EAAJZ,KACbW,EAAcE,KAAKb,E,IAGlB,0FAG8Bd,OAAbwB,EAAK,UACvBxB,OAD+BiB,EAAMW,IAAI,8BAG1B5B,OAFfwB,EAAK,sDAGaxB,OADHe,EAAQ,wCAENf,OADCgB,EAAW,uCACEhB,OAAdyB,EAAc,iB,IAGxCI,KAAK,IACRlB,EAAYmB,mBAAmB,YAAaT,E,CAzCnBU,CAAkBlB,E,IACxCmB,OAAM,SAACC,G,OAAUd,QAAQC,IAAIa,E","sources":["src/fetchCountries.js","src/index.js"],"sourcesContent":["const BASE_URL = `https://restcountries.com/v2/all`;\n\nfunction fetchCountries() {\nconst url = `${BASE_URL}?fields=name,capital,population,flags,languages`;\n  return fetch(url).then(\n    (response) => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n        return response.json();\n    }\n  );\n}\n\nexport default { fetchCountries };","import './css/styles.css';\nimport API from './fetchCountries';\n\nconst DEBOUNCE_DELAY = 300;\nconst searchBox = document.querySelector('#search-box');\nconst countryList = document.querySelector('.country-list');\nconst countryInfo = document.querySelector('.country-info');\n\nsearchBox.addEventListener('input', () => {\n  API.fetchCountries()\n    //   .then((countries) => renderCountriesList(countries))\n      .then((countries) => renderCountryInfo(countries))\n    .catch((error) => console.log(error));\n});\n\n\n\nfunction renderCountriesList(countries) {\n    const { name, capital, population, flags, languages } = countries;\n    console.log(countries);\n  const markup = countries\n    .map(({ name, flags }) => {\n        return `<li>\n        <img alt=\"Flag of ${name}\" src=${flags.svg} width=\"25\">\n        <p>${name}</p>\n        </li>`;\n    })\n    .join(\"\");\n  countryList.insertAdjacentHTML('beforeend', markup);\n}\nfunction renderCountryInfo(countries) {\n    const { name, capital, population, flags, languages } = countries;\n    console.log(countries);\n  const markup = countries\n      .map(({ name, capital, population, flags, languages }) => {\n          const languagesList = [];\n          languages.map(({ name }) => {\n              languagesList.push(name);\n          });\n\n        return `\n        <div>\n            <h2 class=\"country-title\">\n            <img alt=\"Flag of ${name}\" src=${flags.svg} width=\"25\">\n            ${name}</h2>\n        </div>\n        <p><b>Capital:</b> ${capital}</p>\n        <p><b>Population:</b> ${population}</p>\n        <p><b>Languages:</b> ${languagesList}</p>\n        `;\n    })\n    .join(\"\");\n  countryInfo.insertAdjacentHTML('beforeend', markup);\n}\n\n\n\n//   Создай фронтенд часть приложения поиска данных о стране по её частичному или полному имени. \n// Посмотри демо видео работы приложения.\n//==============\n// HTTP-запросы​\n//==============\n//   Используй публичный API Rest Countries, а именно ресурс name, возвращающий массив объектов \n// стран удовлетворивших критерий поиска. \n// Добавь минимальное оформление элементов интерфейса.\n// Напиши функцию fetchCountries(name) которая делает HTTP-запрос на ресурс name и возвращает \n// промис с массивом стран - результатом запроса. \n// Вынеси её в отдельный файл fetchCountries.js и сделай именованный экспорт.\n//==================\n// Фильтрация полей​\n//==================\n//   В ответе от бэкенда возвращаются объекты, большая часть свойств которых тебе не пригодится. \n// Чтобы сократить объем передаваемых данных добавь строку параметров запроса - так этот \n// бэкенд реализует фильтрацию полей. Ознакомься с документацией синтаксиса фильтров.\n//   Тебе нужны только следующие свойства:\n// - name.official - полное имя страны\n// - capital - столица\n// - population - население\n// - flags.svg - ссылка на изображение флага\n// - languages - массив языков\n//=============\n// Поле поиска​\n//=============\n//   Название страны для поиска пользователь вводит в текстовое поле input#search-box. \n// HTTP - запросы выполняются при наборе имени страны, то есть по событию input. \n// Но, делать запрос при каждом нажатии клавиши нельзя, так как одновременно получится много \n// запросов и они будут выполняться в непредсказуемом порядке.\n// Необходимо применить приём Debounce на обработчике события и делать HTTP-запрос спустя \n// 300мс после того, как пользователь перестал вводить текст. Используй пакет lodash.debounce.\n// Если пользователь полностью очищает поле поиска, то HTTP-запрос не выполняется, а разметка \n// списка стран или информации о стране пропадает.\n// Выполни санитизацию введенной строки методом trim(), это решит проблему когда в поле ввода \n// только пробелы или они есть в начале и в конце строки.\n//===========\n// Интерфейс​\n//===========\n//   Если в ответе бэкенд вернул больше чем 10 стран, в интерфейсе пояляется уведомление о том, \n// что имя должно быть более специфичным. Для уведомлений используй библиотеку notiflix и \n// выводи такую строку \"Too many matches found. Please enter a more specific name.\".\n//   Если бэкенд вернул от 2-х до 10-х стран, под тестовым полем отображается список найденных \n// стран. Каждый элемент списка состоит из флага и имени страны.\n//   Если результат запроса это массив с одной страной, в интерфейсе отображается разметка \n// карточки с данными о стране: флаг, название, столица, население и языки.\n//   ВНИМАНИЕ\n// Достаточно чтобы приложение работало для большинства стран. Некоторые страны, такие как \n// Sudan, могут создавать проблемы, поскольку название страны является частью названия другой \n// страны, South Sudan. Не нужно беспокоиться об этих исключениях.\n//==================\n// Обработка ошибки​\n//==================\n//   Если пользователь ввёл имя страны которой не существует, бэкенд вернёт не пустой массив, \n// а ошибку со статус кодом 404 - не найдено. Если это не обработать, то пользователь никогда \n// не узнает о том, что поиск не дал результатов.\n//   Добавь уведомление \"Oops, there is no country with that name\" в случае ошибки используя \n// библиотеку notiflix.\n//   ВНИМАНИЕ\n// Не забывай о том, что fetch не считает 404 ошибкой, поэтому необходимо явно отклонить \n// промис чтобы можно было словить и обработать ошибку."],"names":["$244f2db7c7c4b658$export$2e2bcd8739ae039","fetchCountries","url","concat","fetch","then","response","ok","Error","status","json","$b8f9b7833fa37166$var$searchBox","document","querySelector","$b8f9b7833fa37166$var$countryInfo","addEventListener","countries","name","capital","population","flags","languages","console","log","markup","map","param1","name3","languagesList","param","push","svg","join","insertAdjacentHTML","$b8f9b7833fa37166$var$renderCountryInfo","catch","error"],"version":3,"file":"index.3c1811e1.js.map"}